{"name":"Fast Network Simulation Setup","tagline":"","body":"### News\r\n**AIMS 2014 tutorial**\r\n> We will give a tutorial on FNSS at the [AIMS 2014 conference](http://www.aims-conference.org/2014/tutorials.html). We will prepare a virtual machine image with all required configuration for the attendees of the tutorial. We will make it available here starting from mid May.\r\n\r\n### Overview\r\nFast Network Simulation Setup (FNSS) is a toolchain allowing network researchers and engineers to simplify the process of setting up a network experiment scenario. It allows users to:\r\n\r\n* Parse a topology from a dataset or a topology generator or generate it according to a number of synthetic models\r\n* Configure links with capacity, weights, delays and buffer sizes\r\n* Deploy applications and protocol stacks on nodes\r\n* Generate traffic matrices\r\n* Generate event schedules\r\n* Deploy network and workload configuration to a number of simulators and emulators\r\n\r\nThe core library, which provides the features listed above, is written in [Python](http://www.python.org). FNSS also provides a set of adapters to export this configuration to [ns-2](http://www.isi.edu/nsnam/ns/), [ns-3](http://www.nsnam.org/), [Mininet](http://www.mininet.org) and [Autonetkit](http://www.autonetkit.org)\r\nas well as to other simulators or emulators through Python, Java and C++ APIs.\r\n\r\n### Usage\r\nTo use FNSS you would normally use the following workflow.\r\n\r\n 1. Create an experiment scenario (topology, traffic matrices, event schedules) using the Python core library.\r\n 2. Export the created scenario in your target simulator/emulator.\r\n      * If your target simulator/emulator is ns-2, Mininet or Autonetkit or a Python program, the core library include functions to export the scenario created in your target environment.\r\n      * Otherwise, if you wish to run your experiments on ns-3 or a Java or C++ program, then export the scenario to XML files using the provided functions and use the C++ or Java APIs or the ns-3 adapter to import the scenario XML files into your target simulator/emulator.\r\n\r\n### Install\r\n\r\n#### Ubuntu (version 12.04+)\r\n\r\nIf you use Ubuntu, you can install the FNSS core library along with the Python interpreter and all required dependencies by running the following script:\r\n\r\n    $ curl -L https://github.com/fnss/fnss/raw/master/core/ubuntu_install.sh | sh\r\n\r\nYou need superuser privileges to run this script. If you don't trust running this script, you can inspect its source code [here](https://github.com/fnss/fnss/blob/master/core/ubuntu_install.sh).\r\n\r\n#### Other operating systems\r\n\r\nThe easiest way to install the core Python library is to download it and install it from the [Python Package Index](http://pypi.python.org/pypi/fnss). To do so, you must have [Python](http://www.python.org) (version >= 2.6) installed on your machine and either [`pip`](http://www.pip-installer.org/) or [`easy_install`](http://peak.telecommunity.com/DevCenter/EasyInstall).\r\n\r\nTo install the FNSS core library using `easy_install` open a command shell and type:\r\n\r\n    $ easy_install fnss\r\n\r\nIf you use `pip`, type instead:\r\n\r\n    $ pip fnss\r\n   \r\nDepending on the configuration of your machine you may need to run `pip` or `easy_install` as superuser.\r\nWhether you use `pip` or `easy_install`, the commands reported above will download the latest version of the FNSS core library and install it on your machine together with all required dependencies.\r\n\r\nAt this stage you are ready to use the Python core library. To use the Java or C++ APIs or the ns-3 adapters, please download the specific components that you need from the links below.\r\n\r\n### Download\r\n\r\nYou can either browse the code from the [FNSS GitHub repository](http://www.github.com/fnss/fnss) or choose among the following download options:\r\n\r\n#### Latest stable release (0.4.0)\r\n\r\n * Complete code \\[[tar.gz](https://github.com/fnss/fnss/archive/v0.4.0.tar.gz)\\] \\[[zip](https://github.com/fnss/fnss/archive/v0.4.0.zip)\\]\r\n * Python core library \\[[tar.gz](download/core/fnss-core-0.4.0.tar.gz)\\] \\[[zip](download/core/fnss-core-0.4.0.zip)\\]\r\n * C++ API \\[[tar.gz](download/cpp/fnss-cpp-api-0.4.0.tar.gz)\\] \\[[zip](download/cpp/fnss-cpp-api-0.4.0.zip)\\]\r\n * Java++ API \\[[tar.gz](download/java/fnss-java-api-0.4.0-all.tar.gz)\\] \\[[zip](download/java/fnss-java-api-0.4.0-all.zip)\\]\r\n * ns-3 adapter \\[[tar.gz](download/ns3/fnss-ns3-api-0.4.0.tar.gz)\\] \\[[zip](download/ns3/fnss-ns3-api-0.4.0.zip)\\]\r\n\r\n#### Development branch\r\nYou can download the latest version of the code from the development branch using [Git](http://git-scm.com/). The code on the development branch is usually quite stable and can be used safely.\r\nOpen a command shell, move to the directory where you want to download FNSS and type:\r\n\r\n    $ git clone https://github.com/fnss/fnss.git\r\n\r\nAlternatively, you can get a compressed archive of the development branch:\r\n\r\n * [master.tar.gz](https://github.com/fnss/fnss/archive/master.tar.gz)\r\n * [master.zip](https://github.com/fnss/fnss/archive/master.zip)\r\n\r\n### Documentation\r\nHere you can access the HTML documentation of the various components of the FNSS toolchain. Documentation and examples are also included in the component packages that can be downloaded from the links above.\r\n\r\n * [Python core library](doc/core/)\r\n * [C++ API](doc/cpp/)\r\n * [Java API](doc/java/)\r\n\r\n\r\n### Publications\r\n\r\n* L. Saino, C. Cocora, G. Pavlou, [A Toolchain for Simplifying Network Simulation Setup](http://www.ee.ucl.ac.uk/~lsaino/publications/fnss-simutools13.pdf),\r\n  in *Proceedings of the 6th International ICST Conference on Simulation Tools and Techniques (SIMUTOOLS '13)*, Cannes, France, March 2013\r\n\r\n### Citing\r\nIf you cite FNSS in your paper, please refer to the following pubblication:\r\n\r\n    @inproceedings{fnss,\r\n         author = {Saino, Lorenzo and Cocora, Cosmin and Pavlou, George},\r\n         title = {A Toolchain for Simplifying Network Simulation Setup},\r\n         booktitle = {Proceedings of the 6th International ICST Conference on Simulation Tools and Techniques},\r\n         series = {SIMUTOOLS '13},\r\n         year = {2013},\r\n         location = {Cannes, France},\r\n         numpages = {10},\r\n         publisher = {ICST},\r\n         address = {ICST, Brussels, Belgium, Belgium},\r\n    }\r\n\r\n### Contact\r\nFor any information, please contact [Lorenzo Saino](http://www.ee.ucl.ac.uk/~lsaino).\r\n","google":"UA-37826362-1","note":"Don't delete this file! It's used internally to help with page regeneration."}